#version 460
#extension GL_EXT_ray_tracing : enable
#include "./share.h"
#include "./random.glsl"

layout(location = 0) rayPayloadEXT HitPayload payload;

void main()
{
    const vec2 screenPos = vec2(gl_LaunchIDEXT.xy);
    const vec2 samplingRadius = 2.0 / vec2(gl_LaunchSizeEXT.xy);
    const vec2 uv = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy) * 2.0 - 1.0;
    vec4 origin = invView * vec4(0, 0, 0, 1);

    uvec2 s = pcg2d(gl_LaunchIDEXT.xy * (frame + 1));
    payload.seed = s.x + s.y;

    vec3 radiance = vec3(0.0);
    for(int i = 0; i < sampleCount; i++){
        vec2 offset    = vec2(rand(payload.seed), rand(payload.seed)) * samplingRadius;
        vec4 target    = invProj * vec4(uv.xy + offset, 1, 1);
        vec4 direction = invView * vec4(normalize(target.xyz), 0);
        payload.radiance = vec3(0.0);
        payload.depth = 0;
        traceRayEXT(
            topLevelAS,
            gl_RayFlagsOpaqueEXT,
            0xff, // cullMask
            0,    // sbtRecordOffset
            0,    // sbtRecordStride
            0,    // missIndex
            origin.xyz,
            0.001,
            direction.xyz,
            10000.0,
            0     // payloadLocation
        );
        radiance += payload.radiance;
    }
    radiance /= sampleCount;

    vec3 newColor = radiance;
    if(any(isnan(newColor))){
        newColor = vec3(1, 0, 1);
    } else if(enableAccum == 1){
        vec3 prevColor = imageLoad(accumImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
        newColor = (newColor + (prevColor * frame)) / (frame + 1);
    }
    imageStore(accumImage, ivec2(gl_LaunchIDEXT.xy), vec4(newColor, 1));
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(newColor, 1));
}
